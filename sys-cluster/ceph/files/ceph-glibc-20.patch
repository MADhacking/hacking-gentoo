--- src/common/RWLock.h.old	2015-10-09 18:52:16.201791634 +0100
+++ src/common/RWLock.h	2015-10-09 18:56:04.979174187 +0100
@@ -18,59 +18,81 @@
 #define CEPH_RWLock_Posix__H
 
 #include <pthread.h>
+#include <include/assert.h>
 #include "lockdep.h"
+#include "include/atomic.h"
 
 class RWLock
 {
   mutable pthread_rwlock_t L;
   const char *name;
-  int id;
+  mutable int id;
+  mutable atomic_t nrlock, nwlock;
 
 public:
   RWLock(const RWLock& other);
   const RWLock& operator=(const RWLock& other);
 
-  RWLock(const char *n) : name(n), id(-1) {
+  RWLock(const char *n) : name(n), id(-1), nrlock(0), nwlock(0) {
     pthread_rwlock_init(&L, NULL);
     if (g_lockdep) id = lockdep_register(name);
   }
 
+  bool is_locked() const {
+    return (nrlock.read() > 0) || (nwlock.read() > 0);
+  }
+
+  bool is_wlocked() const {
+    return (nwlock.read() > 0);
+  }
   virtual ~RWLock() {
     pthread_rwlock_unlock(&L);
     pthread_rwlock_destroy(&L);
   }
 
-  void unlock() {
+  void unlock() const {
+    if (nwlock.read() > 0) {
+      nwlock.dec();
+    } else {
+      nrlock.dec();
+    }
     if (g_lockdep) id = lockdep_will_unlock(name, id);
-    pthread_rwlock_unlock(&L);
+    int r = pthread_rwlock_unlock(&L);
+    assert(r == 0);
   }
 
   // read
-  void get_read() {
+  void get_read() const {
     if (g_lockdep) id = lockdep_will_lock(name, id);
-    pthread_rwlock_rdlock(&L);
+    int r = pthread_rwlock_rdlock(&L);
+    assert(r == 0);
     if (g_lockdep) id = lockdep_locked(name, id);
+    nrlock.inc();
   }
-  bool try_get_read() {
+  bool try_get_read() const {
     if (pthread_rwlock_tryrdlock(&L) == 0) {
+      nrlock.inc();
       if (g_lockdep) id = lockdep_locked(name, id);
       return true;
     }
     return false;
   }
-  void put_read() {
+  void put_read() const {
     unlock();
   }
 
   // write
   void get_write() {
     if (g_lockdep) id = lockdep_will_lock(name, id);
-    pthread_rwlock_wrlock(&L);
+    int r = pthread_rwlock_wrlock(&L);
+    assert(r == 0);
     if (g_lockdep) id = lockdep_locked(name, id);
+    nwlock.inc();
   }
   bool try_get_write() {
     if (pthread_rwlock_trywrlock(&L) == 0) {
       if (g_lockdep) id = lockdep_locked(name, id);
+      nwlock.inc();
       return true;
     }
     return false;
@@ -81,10 +103,10 @@
 
 public:
   class RLocker {
-    RWLock &m_lock;
+    const RWLock &m_lock;
 
   public:
-    RLocker(RWLock& lock) : m_lock(lock) {
+    RLocker(const RWLock& lock) : m_lock(lock) {
       m_lock.get_read();
     }
     ~RLocker() {
